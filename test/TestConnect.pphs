module TestConnect where

import Database.HaskellDB.Database
import System.Environment

#ifdef WITH_HSQL_ODBC
import qualified Database.HaskellDB.HSQL.ODBC as OD
#endif
#ifdef WITH_HSQL_MYSQL
import qualified Database.HaskellDB.HSQL.MySQL as MY
#endif
#ifdef WITH_HSQL_SQLITE
import qualified Database.HaskellDB.HSQL.SQLite as LI
import System.IO
#endif
#ifdef WITH_HSQL_POSTGRESQL
import qualified Database.HaskellDB.HSQL.PostgreSQL as PG
#endif

#ifdef WITH_WX
import qualified Database.HaskellDB.WX as WX
#endif

connect :: [String] -> (Database -> IO a) -> IO a
#ifdef WITH_HSQL_ODBC
connect ["ODBC",d,u,p] = OD.odbcConnect OD.ODBCOptions 
				     {OD.dsn = d,OD.uid = u,OD.pwd = p}
#endif
#ifdef WITH_HSQL_MYSQL
connect ["MySQL",s,d,u,p] = MY.mysqlConnect MY.MySQLOptions 
			               {MY.server = s,MY.db = d, 
					MY.uid = u,MY.pwd = p}
#endif
#ifdef WITH_HSQL_SQLITE
connect ["SQLite",f,m] = LI.sqliteConnect LI.SQLiteOptions 
			               {LI.filepath = f,LI.mode = (read m)}
#endif
#ifdef WITH_HSQL_POSTGRESQL
connect ["PostgreSQL",s,d,u,p] = PG.postgresqlConnect PG.PostgreSQLOptions 
			               {PG.server = s,PG.db = d, 
					PG.uid = u,PG.pwd = p}
#endif

#ifdef WITH_WX
connect ["WX",d,u,p] = WX.wxConnect WX.WXOptions 
					{WX.dsn = d,WX.uid = u,WX.pwd = p}
#endif

connect _ = error $ unlines ["Accepted options:",
			     "ODBC dsn uid pwd",
			     "MySQL server db uid pwd",
			     "PostgreSQL server db uid pwd",
			     "WX dsn uid pwd"]

argConnect :: (Database -> IO a) -> IO a
argConnect f = do
               args <- getArgs
               connect args f